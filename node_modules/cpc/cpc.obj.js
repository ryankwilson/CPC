var util = require('./cpc.util.js');

// Trip
//
function Trip(date, vehicle) {
    this.id = "tripid-" + date + vehicle.id;
    this.date = date;
    this.vehicle = vehicle;
    this.driver = vehicle.driver;
    this.legs = [];
    
    this.start = function() {
      this.startTime = Date.now();  
    };
    
    this.addLeg = function(tripLeg) {
        this.legs.push(tripLeg);
    };
    
    this.getLegs = function() {
        return this.legs;
    }
    
    this.stop = function() {
        this.stopTime = Date.now();
        this.elapsedTime = this.stopTime - this.startTime;
    };
    
    this.getTotalMiles = function() {
        var self = this;
        var totalMiles = 0;
        for (var i = 0; i < this.legs.length; i++) {
            var currentLeg = self.legs[i];
            totalMiles += currentLeg.miles;
        }  
        
        return totalMiles;
    };
    
    return this;
}

// TripLeg
//
function TripLeg(parentTrip, milesDriven) {     // This c'tor uses the parent trip's vehicle to determine the passengers
    return TripLeg(parentTrip, milesDriven, parentTrip.vehicle.passengers);
}

function TripLeg(milesDriven, passengers) {
    return TripLeg(undefined, milesDriven, passengers);    
}

function TripLeg(parentTrip, milesDriven, passengers) {
    this.id = 'triplegid-' + Math.random();
    this.parentTrip = parentTrip;
    this.miles = milesDriven;
    this.passengers = passengers;

    this.getPassengers = function() {
        if (this.parentTrip) {
            return this.parentTrip.vehicle.passengers;
        }
        else {
            return this.passengers;
        }
    };
    
    this.totalCostPerMile = function() {
        var costPerMile = this.parentTrip.vehicle.calcCostPerMile();
        return (costPerMile * this.miles);
    };
    
    this.totalCostPerPerson = function() {
        console.log("totalCostPerMile = " + this.totalCostPerMile());
        console.log("passenger count = " + this.getPassengers().length);
        return (this.totalCostPerMile() / this.getPassengers().length);
    };
    
    return this;
}

// Vehicle
function Vehicle(name, milesPerGallon, maintenanceCostPerMile, driver) {
    this.name = name;
    this.mpg = milesPerGallon;
    this.maintenanceCostPerMile = maintenanceCostPerMile;
    this.driver = driver;
    this.passengers = [];
    this.id = "vehicleid-" + name + driver;
    
    this.fuelPricePerGallon = util.getFuelPrice();
    
    this.calcCostPerMile = function() {
        return (this.maintenanceCostPerMile + (this.fuelPricePerGallon / this.mpg));  
    };
    
    this.addPassenger = function(passenger) {
        this.passengers.push(passenger);
    }
    
    this.removePassenger = function(passenger) {
        var passengersToStay = [];
        for (var i = 0; i < this.passengers.length; i++) {
            var currentPassenger = this.passengers[i];
            if (currentPassenger.id != passenger.id) {
                passengersToStay.push(currentPassenger);
            }
        }
        this.passengers = passengersToStay;
    }
    
    return this;
}

// Passenger
function Passenger(name) {
    this.name = name;
    this.id = "passengerid-" + this.name;
    
    return this;
}

// Driver
function Driver(name) {
    this.name = name;
    this.id = "driverid=" + this.name;

    this.addVehicle = function(vehicle) {
      this.vehicle = vehicle;  
    };
    
    return this;
}




///
module.exports = {
    Trip: Trip,
    TripLeg: TripLeg,
    Vehicle: Vehicle,
    Passenger: Passenger,
    Driver: Driver
};